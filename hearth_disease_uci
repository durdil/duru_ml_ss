import seaborn as sns
from scipy.stats import zscore
from sklearn.ensemble import RandomForestClassifier, AdaBoostClassifier
from ucimlrepo import fetch_ucirepo
from sklearn.preprocessing import StandardScaler
import numpy as np
from sklearn.model_selection import train_test_split
import sklearn.metrics as sm
import pandas as pd
import matplotlib.pyplot as plt

# fetch dataset
heart_disease = fetch_ucirepo(id=45)

X = heart_disease.data.features
y = heart_disease.data.targets
y = y['num']

##  PREPROCESSING

#handle missing values in ca(number of major vessels colored by flourosopy)
X = X.fillna(X.mean())

#Handle Outliers using z scores
z_scores = np.abs(zscore(X))
X = X[(z_scores < 3).all(axis=1)]

#standarize variables to achieve equal contribution
scaler = StandardScaler()
X = pd.DataFrame(scaler.fit_transform(X), columns=X.columns, index=X.index)

y = y.loc[X.index]

# Check for intercorrelation and correlation with Y
corr_matrix = X.corr()

plt.figure(figsize=(14, 12))
sns.heatmap(corr_matrix, annot=True, cmap='coolwarm')

#plt.show()
#target_corr = X.corrwith(y)

#thalach is moderately correlated with 5 variables
#oldpeak and slope are moderately correlated
X = X.drop(columns=['thalach', 'oldpeak', 'slope'])


#   TRAINING AND TESTING

#generate test and training sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=78)

#training the Random Forest Classifier model
model = RandomForestClassifier(random_state=78, n_estimators= 400, max_depth= 30, min_samples_split= 10)
model.fit(X_train, y_train)

#testing
y_pred = model.predict(X_test)
accuracy = sm.accuracy_score(y_test, y_pred)
print('Accuracy:', {accuracy})
conf_matrix = sm.confusion_matrix(y_test, y_pred)
print(f'Confusion Matrix:\n{conf_matrix}')

#training the AdaBoostClassifier model
model = AdaBoostClassifier(n_estimators=50, random_state=78, learning_rate=0.1)
model.fit(X_train, y_train)

#testing
y_pred = model.predict(X_test)
accuracy = sm.accuracy_score(y_test, y_pred)
print('Accuracy:', {accuracy})
conf_matrix = sm.confusion_matrix(y_test, y_pred)
print(f'Confusion Matrix:\n{conf_matrix}')
